rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidImage() {
      return request.resource.contentType.matches('image/.*')
        && request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    function isValidMetadata() {
      return request.resource.contentType == 'application/json'
        && request.resource.size < 10 * 1024; // 10KB limit
    }

    function isValidPath(userId) {
      return request.resource.name.matches('images/' + userId + '/.*')
        && !request.resource.name.contains('..');
    }

    // Rules for user's own data
    match /images/{userId}/{allPaths=**} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated()
        && isOwner(userId)
        && isValidPath(userId)
        && (
          (request.resource.name.matches('.*/image\\.jpg') && isValidImage())
          || (request.resource.name.matches('.*/metadata\\.json') && isValidMetadata())
        );
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}